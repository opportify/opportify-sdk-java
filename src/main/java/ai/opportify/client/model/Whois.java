/*
 * Opportify Insights API
 * ## Overview  The **Opportify Insights API** provides access to a powerful and up-to-date platform. With advanced data warehousing and AI-driven capabilities, this API is designed to empower your business to make informed, data-driven decisions and effectively assess potential risks.  ### Base URL Use the following base URL for all API requests:  ```plaintext https://api.opportify.ai/insights/v1/<service>/<endpoint> ```  ### Features - [**Email Insights:**](/docs/api-reference/email-insights)   - Validate email syntax.   - Identify email types (free, disposable, corporate or unknown).   - Real time verifications:     - Reachable: Confirms if the email domain has valid MX DNS records using DNS lookup.     - Deliverable: Simulates an SMTP handshake to check if the email address exists and is deliverable.     - Catch-All: Detects if the domain accepts all emails (catch-all configuration).   - Intelligent Error Correction: Automatically corrects well-known misspelled email addresses.   - Risk Report: Provides an AI-driven normalized score (200-1000) to evaluate email risk, using predefined thresholds.      [Access Documentation >>](/docs/api-reference/email-insights)  - [**IP Insights:**](/docs/api-reference/ip-insights)   - Connection types: Detects connection types such as `wired`, `mobile`, `enterprise`, `satellite`, `VPN`, `cloud-provider`, `open-proxy`, or `Tor`.   - Geo location: Delivers detailed insights such as country, city, timezone, language preferences, and additional location-based information to enhance regional understanding.   - WHOIS: Provides main details including RIR, ASN, organization, and abuse/admin/technical contacts.   - Trusted Provider Recognition: Identifies if the IP is part of a known trusted provider (e.g., ZTNA - Zero Trust Network Access).   - Blocklist Reports: Retrieves up-to-date blocklist statuses, active reports, and the latest detections.   - Risk Report: Delivers an AI-driven normalized score (200-1000) to evaluate IP risk, supported by predefined thresholds.    [Access Documentation >>](/docs/api-reference/ip-insights)  ### Authentication & Security - **API Key:** Access to the API requires an API key, which must be included in the request headers. Businesses can generate unlimited API keys directly from their account, offering flexibility and ease of use.  - **ACL Rules:** Enhance security with Access Control Lists (ACL), allowing you to restrict API access from specific IP addresses or ranges. This feature provides an additional layer of protection by ensuring only authorized IPs can interact with the API. - **No Query Parameters:** As a precautionary measure, our API avoids the use of query parameters for all operations, including authentication and handling Personally Identifiable Information (PII). This approach minimizes security risks by preventing sensitive data from being exposed in access logs, browser history, cached URLs, debugging tools, or inadvertently shared URLs. All sensitive information is securely transmitted through headers or the request body. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://Opportify.ai.tech).
 * https://Opportify.ai.tech
 * Do not edit the class manually.
 */


package ai.opportify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import ai.opportify.client.model.AbuseContact;
import ai.opportify.client.model.AdminContact;
import ai.opportify.client.model.Asn;
import ai.opportify.client.model.Organization;
import ai.opportify.client.model.TechContact;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ai.opportify.client.JSON;

/**
 * ### WHOIS Details This object provides sanitized and normalized WHOIS information for an IP address, including details about the Regional Internet Registry (RIR), Autonomous System Number (ASN), organization, and contact information.  ---  &gt; **IMPORTANT:**  &gt; While the WHOIS data we provide are publicly available and can be accessed through any Regional Internet Registry (RIR) by anyone, we prioritize data privacy. As such, details for address, phone number, and email are **not included in the free plan**. To access this information, you need to subscribe to a paid plan and comply with additional data privacy agreements.  ---  #### Key Features: - **RIR Details**: Identify the Regional Internet Registry managing the IP address. - **ASN Information**: Obtain the Autonomous System Number details, including the ASN identifier, name, and description. - **Organization Data**: Retrieve organization details, such as the ID, name, type, description, address, country, and contact information. - **Contact Information**: Access contact details for abuse, admin, and tech issues, including the contact ID, type, name, address, phone, fax, and email.  ---  ### Response Elements 
 */
@javax.annotation.Generated(value = "ai.opportify.codegen.languages.JavaClientCodegen", date = "2024-12-26T14:40:56.270361-08:00[America/Los_Angeles]", comments = "Generator version: 7.10.0")
public class Whois {
  public static final String SERIALIZED_NAME_RIR = "rir";
  @SerializedName(SERIALIZED_NAME_RIR)
  @javax.annotation.Nullable
  private String rir;

  public static final String SERIALIZED_NAME_ASN = "asn";
  @SerializedName(SERIALIZED_NAME_ASN)
  @javax.annotation.Nullable
  private Asn asn;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  @javax.annotation.Nullable
  private Organization organization;

  public static final String SERIALIZED_NAME_ABUSE_CONTACT = "abuseContact";
  @SerializedName(SERIALIZED_NAME_ABUSE_CONTACT)
  @javax.annotation.Nullable
  private AbuseContact abuseContact;

  public static final String SERIALIZED_NAME_ADMIN_CONTACT = "adminContact";
  @SerializedName(SERIALIZED_NAME_ADMIN_CONTACT)
  @javax.annotation.Nullable
  private AdminContact adminContact;

  public static final String SERIALIZED_NAME_TECH_CONTACT = "techContact";
  @SerializedName(SERIALIZED_NAME_TECH_CONTACT)
  @javax.annotation.Nullable
  private TechContact techContact;

  public Whois() {
  }

  public Whois rir(@javax.annotation.Nullable String rir) {
    this.rir = rir;
    return this;
  }

  /**
   * Regional Internet Registry managing the IP.
   * @return rir
   */
  @javax.annotation.Nullable
  public String getRir() {
    return rir;
  }

  public void setRir(@javax.annotation.Nullable String rir) {
    this.rir = rir;
  }


  public Whois asn(@javax.annotation.Nullable Asn asn) {
    this.asn = asn;
    return this;
  }

  /**
   * Get asn
   * @return asn
   */
  @javax.annotation.Nullable
  public Asn getAsn() {
    return asn;
  }

  public void setAsn(@javax.annotation.Nullable Asn asn) {
    this.asn = asn;
  }


  public Whois organization(@javax.annotation.Nullable Organization organization) {
    this.organization = organization;
    return this;
  }

  /**
   * Get organization
   * @return organization
   */
  @javax.annotation.Nullable
  public Organization getOrganization() {
    return organization;
  }

  public void setOrganization(@javax.annotation.Nullable Organization organization) {
    this.organization = organization;
  }


  public Whois abuseContact(@javax.annotation.Nullable AbuseContact abuseContact) {
    this.abuseContact = abuseContact;
    return this;
  }

  /**
   * Get abuseContact
   * @return abuseContact
   */
  @javax.annotation.Nullable
  public AbuseContact getAbuseContact() {
    return abuseContact;
  }

  public void setAbuseContact(@javax.annotation.Nullable AbuseContact abuseContact) {
    this.abuseContact = abuseContact;
  }


  public Whois adminContact(@javax.annotation.Nullable AdminContact adminContact) {
    this.adminContact = adminContact;
    return this;
  }

  /**
   * Get adminContact
   * @return adminContact
   */
  @javax.annotation.Nullable
  public AdminContact getAdminContact() {
    return adminContact;
  }

  public void setAdminContact(@javax.annotation.Nullable AdminContact adminContact) {
    this.adminContact = adminContact;
  }


  public Whois techContact(@javax.annotation.Nullable TechContact techContact) {
    this.techContact = techContact;
    return this;
  }

  /**
   * Get techContact
   * @return techContact
   */
  @javax.annotation.Nullable
  public TechContact getTechContact() {
    return techContact;
  }

  public void setTechContact(@javax.annotation.Nullable TechContact techContact) {
    this.techContact = techContact;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Whois whois = (Whois) o;
    return Objects.equals(this.rir, whois.rir) &&
        Objects.equals(this.asn, whois.asn) &&
        Objects.equals(this.organization, whois.organization) &&
        Objects.equals(this.abuseContact, whois.abuseContact) &&
        Objects.equals(this.adminContact, whois.adminContact) &&
        Objects.equals(this.techContact, whois.techContact);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rir, asn, organization, abuseContact, adminContact, techContact);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Whois {\n");
    sb.append("    rir: ").append(toIndentedString(rir)).append("\n");
    sb.append("    asn: ").append(toIndentedString(asn)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    abuseContact: ").append(toIndentedString(abuseContact)).append("\n");
    sb.append("    adminContact: ").append(toIndentedString(adminContact)).append("\n");
    sb.append("    techContact: ").append(toIndentedString(techContact)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rir");
    openapiFields.add("asn");
    openapiFields.add("organization");
    openapiFields.add("abuseContact");
    openapiFields.add("adminContact");
    openapiFields.add("techContact");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Whois
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Whois.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Whois is not found in the empty JSON string", Whois.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Whois.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Whois` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("rir") != null && !jsonObj.get("rir").isJsonNull()) && !jsonObj.get("rir").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rir").toString()));
      }
      // validate the optional field `asn`
      if (jsonObj.get("asn") != null && !jsonObj.get("asn").isJsonNull()) {
        Asn.validateJsonElement(jsonObj.get("asn"));
      }
      // validate the optional field `organization`
      if (jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) {
        Organization.validateJsonElement(jsonObj.get("organization"));
      }
      // validate the optional field `abuseContact`
      if (jsonObj.get("abuseContact") != null && !jsonObj.get("abuseContact").isJsonNull()) {
        AbuseContact.validateJsonElement(jsonObj.get("abuseContact"));
      }
      // validate the optional field `adminContact`
      if (jsonObj.get("adminContact") != null && !jsonObj.get("adminContact").isJsonNull()) {
        AdminContact.validateJsonElement(jsonObj.get("adminContact"));
      }
      // validate the optional field `techContact`
      if (jsonObj.get("techContact") != null && !jsonObj.get("techContact").isJsonNull()) {
        TechContact.validateJsonElement(jsonObj.get("techContact"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Whois.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Whois' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Whois> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Whois.class));

       return (TypeAdapter<T>) new TypeAdapter<Whois>() {
           @Override
           public void write(JsonWriter out, Whois value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Whois read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Whois given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Whois
   * @throws IOException if the JSON string is invalid with respect to Whois
   */
  public static Whois fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Whois.class);
  }

  /**
   * Convert an instance of Whois to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

