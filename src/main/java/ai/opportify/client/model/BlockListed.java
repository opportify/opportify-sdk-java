/*
 * Opportify Insights API
 * ## Overview  The **Opportify Insights API** provides access to a powerful and up-to-date platform. With advanced data warehousing and AI-driven capabilities, this API is designed to empower your business to make informed, data-driven decisions and effectively assess potential risks.  ### Base URL Use the following base URL for all API requests:  ```plaintext https://api.opportify.ai/insights/v1/<service>/<endpoint> ```  ### Features - [**Email Insights:**](/docs/api/api-reference/email-insights)   - Validate email syntax.   - Identify email types (free, disposable, corporate or unknown).   - Real time verifications:     - Reachable: Confirms if the email domain has valid MX DNS records using DNS lookup.     - Deliverable: Simulates an SMTP handshake to check if the email address exists and is deliverable.     - Catch-All: Detects if the domain accepts all emails (catch-all configuration).   - Intelligent Error Correction: Automatically corrects well-known misspelled email addresses.   - Risk Report: Provides an AI-driven normalized score (200-1000) to evaluate email risk, using predefined thresholds.      [Access Documentation >>](/docs/api/api-reference/email-insights)  - [**IP Insights:**](/docs/api/api-reference/ip-insights)   - Connection types: Detects connection types such as `wired`, `mobile`, `enterprise`, `satellite`, `VPN`, `cloud-provider`, `open-proxy`, or `Tor`.   - Geo location: Delivers detailed insights such as country, city, timezone, language preferences, and additional location-based information to enhance regional understanding.   - WHOIS: Provides main details including RIR, ASN, organization, and abuse/admin/technical contacts.   - Trusted Provider Recognition: Identifies if the IP is part of a known trusted provider (e.g., ZTNA - Zero Trust Network Access).   - Blocklist Reports: Retrieves up-to-date blocklist statuses, active reports, and the latest detections.   - Risk Report: Delivers an AI-driven normalized score (200-1000) to evaluate IP risk, supported by predefined thresholds.    [Access Documentation >>](/docs/api/api-reference/ip-insights)  ### Authentication & Security - **API Key:** Access to the API requires an API key, which must be included in the request headers. Businesses can generate unlimited API keys directly from their account, offering flexibility and ease of use.  - **ACL Rules:** Enhance security with Access Control Lists (ACL), allowing you to restrict API access from specific IP addresses or ranges. This feature provides an additional layer of protection by ensuring only authorized IPs can interact with the API. - **No Query Parameters:** As a precautionary measure, our API avoids the use of query parameters for all operations, including authentication and handling Personally Identifiable Information (PII). This approach minimizes security risks by preventing sensitive data from being exposed in access logs, browser history, cached URLs, debugging tools, or inadvertently shared URLs. All sensitive information is securely transmitted through headers or the request body. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://www.opportify.ai).
 * https://www.opportify.ai
 * Do not edit the class manually.
 */


package ai.opportify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ai.opportify.client.JSON;

/**
 * ### Block Listed Details  The &#x60;BlockListed&#x60; object provides detailed information about whether an IP address is listed in known blocklists and related data.   ---  #### Key Highlights: - **Continuous Monitoring**: We constantly monitor and update blocklist sources to ensure the information is accurate and reflects the latest active reports. - **Expanding Coverage**: Our system incorporates a wide range of trusted sources, with continuous efforts to onboard additional blocklist data providers.  ---  ### Response Elements 
 */
@javax.annotation.Generated(value = "ai.opportify.codegen.languages.JavaClientCodegen", date = "2025-01-07T17:36:50.096636-08:00[America/Los_Angeles]", comments = "Generator version: 7.10.0")
public class BlockListed {
  public static final String SERIALIZED_NAME_IS_BLOCK_LISTED = "isBlockListed";
  @SerializedName(SERIALIZED_NAME_IS_BLOCK_LISTED)
  @javax.annotation.Nonnull
  private Boolean isBlockListed;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  @javax.annotation.Nonnull
  private Integer sources;

  public static final String SERIALIZED_NAME_ACTIVE_REPORTS = "activeReports";
  @SerializedName(SERIALIZED_NAME_ACTIVE_REPORTS)
  @javax.annotation.Nonnull
  private Integer activeReports;

  public static final String SERIALIZED_NAME_LAST_DETECTED = "lastDetected";
  @SerializedName(SERIALIZED_NAME_LAST_DETECTED)
  @javax.annotation.Nullable
  private OffsetDateTime lastDetected;

  public BlockListed() {
  }

  public BlockListed isBlockListed(@javax.annotation.Nonnull Boolean isBlockListed) {
    this.isBlockListed = isBlockListed;
    return this;
  }

  /**
   * Indicates if the IP is blocklisted in some of the known blocklist sources.
   * @return isBlockListed
   */
  @javax.annotation.Nonnull
  public Boolean getIsBlockListed() {
    return isBlockListed;
  }

  public void setIsBlockListed(@javax.annotation.Nonnull Boolean isBlockListed) {
    this.isBlockListed = isBlockListed;
  }


  public BlockListed sources(@javax.annotation.Nonnull Integer sources) {
    this.sources = sources;
    return this;
  }

  /**
   * Number of blocklist sources.
   * @return sources
   */
  @javax.annotation.Nonnull
  public Integer getSources() {
    return sources;
  }

  public void setSources(@javax.annotation.Nonnull Integer sources) {
    this.sources = sources;
  }


  public BlockListed activeReports(@javax.annotation.Nonnull Integer activeReports) {
    this.activeReports = activeReports;
    return this;
  }

  /**
   * Number of blocklist active reports for the given IP address. We constantly monitor and update this value as new reports are detected or resolved.
   * @return activeReports
   */
  @javax.annotation.Nonnull
  public Integer getActiveReports() {
    return activeReports;
  }

  public void setActiveReports(@javax.annotation.Nonnull Integer activeReports) {
    this.activeReports = activeReports;
  }


  public BlockListed lastDetected(@javax.annotation.Nullable OffsetDateTime lastDetected) {
    this.lastDetected = lastDetected;
    return this;
  }

  /**
   * Date and time of the last blocklist detection. ISO 8601 standard.
   * @return lastDetected
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastDetected() {
    return lastDetected;
  }

  public void setLastDetected(@javax.annotation.Nullable OffsetDateTime lastDetected) {
    this.lastDetected = lastDetected;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlockListed blockListed = (BlockListed) o;
    return Objects.equals(this.isBlockListed, blockListed.isBlockListed) &&
        Objects.equals(this.sources, blockListed.sources) &&
        Objects.equals(this.activeReports, blockListed.activeReports) &&
        Objects.equals(this.lastDetected, blockListed.lastDetected);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isBlockListed, sources, activeReports, lastDetected);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlockListed {\n");
    sb.append("    isBlockListed: ").append(toIndentedString(isBlockListed)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    activeReports: ").append(toIndentedString(activeReports)).append("\n");
    sb.append("    lastDetected: ").append(toIndentedString(lastDetected)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isBlockListed");
    openapiFields.add("sources");
    openapiFields.add("activeReports");
    openapiFields.add("lastDetected");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("isBlockListed");
    openapiRequiredFields.add("sources");
    openapiRequiredFields.add("activeReports");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BlockListed
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlockListed.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlockListed is not found in the empty JSON string", BlockListed.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BlockListed.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BlockListed` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BlockListed.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlockListed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlockListed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlockListed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlockListed.class));

       return (TypeAdapter<T>) new TypeAdapter<BlockListed>() {
           @Override
           public void write(JsonWriter out, BlockListed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlockListed read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BlockListed given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BlockListed
   * @throws IOException if the JSON string is invalid with respect to BlockListed
   */
  public static BlockListed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlockListed.class);
  }

  /**
   * Convert an instance of BlockListed to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

