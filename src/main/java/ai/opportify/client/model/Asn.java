/*
 * Opportify Insights API
 * ## Overview  The **Opportify Insights API** provides access to a powerful and up-to-date platform. With advanced data warehousing and AI-driven capabilities, this API is designed to empower your business to make informed, data-driven decisions and effectively assess potential risks.  ### Base URL Use the following base URL for all API requests:  ```plaintext https://api.opportify.ai/insights/v1/<service>/<endpoint> ```  ### Features - [**Email Insights:**](/docs/api-reference/email-insights)   - Validate email syntax.   - Identify email types (free, disposable, corporate or unknown).   - Real time verifications:     - Reachable: Confirms if the email domain has valid MX DNS records using DNS lookup.     - Deliverable: Simulates an SMTP handshake to check if the email address exists and is deliverable.     - Catch-All: Detects if the domain accepts all emails (catch-all configuration).   - Intelligent Error Correction: Automatically corrects well-known misspelled email addresses.   - Risk Report: Provides an AI-driven normalized score (200-1000) to evaluate email risk, using predefined thresholds.      [Access Documentation >>](/docs/api-reference/email-insights)  - [**IP Insights:**](/docs/api-reference/ip-insights)   - Connection types: Detects connection types such as `wired`, `mobile`, `enterprise`, `satellite`, `VPN`, `cloud-provider`, `open-proxy`, or `Tor`.   - Geo location: Delivers detailed insights such as country, city, timezone, language preferences, and additional location-based information to enhance regional understanding.   - WHOIS: Provides main details including RIR, ASN, organization, and abuse/admin/technical contacts.   - Trusted Provider Recognition: Identifies if the IP is part of a known trusted provider (e.g., ZTNA - Zero Trust Network Access).   - Blocklist Reports: Retrieves up-to-date blocklist statuses, active reports, and the latest detections.   - Risk Report: Delivers an AI-driven normalized score (200-1000) to evaluate IP risk, supported by predefined thresholds.    [Access Documentation >>](/docs/api-reference/ip-insights)  ### Authentication & Security - **API Key:** Access to the API requires an API key, which must be included in the request headers. Businesses can generate unlimited API keys directly from their account, offering flexibility and ease of use.  - **ACL Rules:** Enhance security with Access Control Lists (ACL), allowing you to restrict API access from specific IP addresses or ranges. This feature provides an additional layer of protection by ensuring only authorized IPs can interact with the API. - **No Query Parameters:** As a precautionary measure, our API avoids the use of query parameters for all operations, including authentication and handling Personally Identifiable Information (PII). This approach minimizes security risks by preventing sensitive data from being exposed in access logs, browser history, cached URLs, debugging tools, or inadvertently shared URLs. All sensitive information is securely transmitted through headers or the request body. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://Opportify.ai.tech).
 * https://Opportify.ai.tech
 * Do not edit the class manually.
 */


package ai.opportify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ai.opportify.client.JSON;

/**
 * Autonomous System Number details.
 */
@javax.annotation.Generated(value = "ai.opportify.codegen.languages.JavaClientCodegen", date = "2024-12-26T14:40:56.270361-08:00[America/Los_Angeles]", comments = "Generator version: 7.10.0")
public class Asn {
  public static final String SERIALIZED_NAME_ASN_ID = "asnId";
  @SerializedName(SERIALIZED_NAME_ASN_ID)
  @javax.annotation.Nullable
  private String asnId;

  public static final String SERIALIZED_NAME_AS_NAME = "asName";
  @SerializedName(SERIALIZED_NAME_AS_NAME)
  @javax.annotation.Nullable
  private String asName;

  public static final String SERIALIZED_NAME_DESCR = "descr";
  @SerializedName(SERIALIZED_NAME_DESCR)
  @javax.annotation.Nullable
  private List<String> descr = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private List<String> email = new ArrayList<>();

  public Asn() {
  }

  public Asn asnId(@javax.annotation.Nullable String asnId) {
    this.asnId = asnId;
    return this;
  }

  /**
   * ASN identifier.
   * @return asnId
   */
  @javax.annotation.Nullable
  public String getAsnId() {
    return asnId;
  }

  public void setAsnId(@javax.annotation.Nullable String asnId) {
    this.asnId = asnId;
  }


  public Asn asName(@javax.annotation.Nullable String asName) {
    this.asName = asName;
    return this;
  }

  /**
   * ASN name.
   * @return asName
   */
  @javax.annotation.Nullable
  public String getAsName() {
    return asName;
  }

  public void setAsName(@javax.annotation.Nullable String asName) {
    this.asName = asName;
  }


  public Asn descr(@javax.annotation.Nullable List<String> descr) {
    this.descr = descr;
    return this;
  }

  public Asn addDescrItem(String descrItem) {
    if (this.descr == null) {
      this.descr = new ArrayList<>();
    }
    this.descr.add(descrItem);
    return this;
  }

  /**
   * ASN description. It might return different values based on the data source. Some provide ownership, address, others provide a more abstract description. Our system tries to sanitize removing visual blocks special characters (+++, ---, ...).
   * @return descr
   */
  @javax.annotation.Nullable
  public List<String> getDescr() {
    return descr;
  }

  public void setDescr(@javax.annotation.Nullable List<String> descr) {
    this.descr = descr;
  }


  public Asn email(@javax.annotation.Nullable List<String> email) {
    this.email = email;
    return this;
  }

  public Asn addEmailItem(String emailItem) {
    if (this.email == null) {
      this.email = new ArrayList<>();
    }
    this.email.add(emailItem);
    return this;
  }

  /**
   * Previously sanitized and validated contact email addresses always in lower case.
   * @return email
   */
  @javax.annotation.Nullable
  public List<String> getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable List<String> email) {
    this.email = email;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Asn asn = (Asn) o;
    return Objects.equals(this.asnId, asn.asnId) &&
        Objects.equals(this.asName, asn.asName) &&
        Objects.equals(this.descr, asn.descr) &&
        Objects.equals(this.email, asn.email);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asnId, asName, descr, email);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Asn {\n");
    sb.append("    asnId: ").append(toIndentedString(asnId)).append("\n");
    sb.append("    asName: ").append(toIndentedString(asName)).append("\n");
    sb.append("    descr: ").append(toIndentedString(descr)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asnId");
    openapiFields.add("asName");
    openapiFields.add("descr");
    openapiFields.add("email");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Asn
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Asn.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Asn is not found in the empty JSON string", Asn.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Asn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Asn` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("asnId") != null && !jsonObj.get("asnId").isJsonNull()) && !jsonObj.get("asnId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asnId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asnId").toString()));
      }
      if ((jsonObj.get("asName") != null && !jsonObj.get("asName").isJsonNull()) && !jsonObj.get("asName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("descr") != null && !jsonObj.get("descr").isJsonNull() && !jsonObj.get("descr").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `descr` to be an array in the JSON string but got `%s`", jsonObj.get("descr").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull() && !jsonObj.get("email").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be an array in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Asn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Asn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Asn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Asn.class));

       return (TypeAdapter<T>) new TypeAdapter<Asn>() {
           @Override
           public void write(JsonWriter out, Asn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Asn read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Asn given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Asn
   * @throws IOException if the JSON string is invalid with respect to Asn
   */
  public static Asn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Asn.class);
  }

  /**
   * Convert an instance of Asn to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

