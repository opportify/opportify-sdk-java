/*
 * Opportify Insights API
 * ## Overview  The **Opportify Insights API** provides access to a powerful and up-to-date platform. With advanced data warehousing and AI-driven capabilities, this API is designed to empower your business to make informed, data-driven decisions and effectively assess potential risks.  ### Base URL Use the following base URL for all API requests:  ```plaintext https://api.opportify.ai/insights/v1/<service>/<endpoint> ```  ### Features - [**Email Insights:**](/docs/api-reference/email-insights)   - Validate email syntax.   - Identify email types (free, disposable, corporate or unknown).   - Real time verifications:     - Reachable: Confirms if the email domain has valid MX DNS records using DNS lookup.     - Deliverable: Simulates an SMTP handshake to check if the email address exists and is deliverable.     - Catch-All: Detects if the domain accepts all emails (catch-all configuration).   - Intelligent Error Correction: Automatically corrects well-known misspelled email addresses.   - Risk Report: Provides an AI-driven normalized score (200-1000) to evaluate email risk, using predefined thresholds.      [Access Documentation >>](/docs/api-reference/email-insights)  - [**IP Insights:**](/docs/api-reference/ip-insights)   - Connection types: Detects connection types such as `wired`, `mobile`, `enterprise`, `satellite`, `VPN`, `cloud-provider`, `open-proxy`, or `Tor`.   - Geo location: Delivers detailed insights such as country, city, timezone, language preferences, and additional location-based information to enhance regional understanding.   - WHOIS: Provides main details including RIR, ASN, organization, and abuse/admin/technical contacts.   - Trusted Provider Recognition: Identifies if the IP is part of a known trusted provider (e.g., ZTNA - Zero Trust Network Access).   - Blocklist Reports: Retrieves up-to-date blocklist statuses, active reports, and the latest detections.   - Risk Report: Delivers an AI-driven normalized score (200-1000) to evaluate IP risk, supported by predefined thresholds.    [Access Documentation >>](/docs/api-reference/ip-insights)  ### Authentication & Security - **API Key:** Access to the API requires an API key, which must be included in the request headers. Businesses can generate unlimited API keys directly from their account, offering flexibility and ease of use.  - **ACL Rules:** Enhance security with Access Control Lists (ACL), allowing you to restrict API access from specific IP addresses or ranges. This feature provides an additional layer of protection by ensuring only authorized IPs can interact with the API. - **No Query Parameters:** As a precautionary measure, our API avoids the use of query parameters for all operations, including authentication and handling Personally Identifiable Information (PII). This approach minimizes security risks by preventing sensitive data from being exposed in access logs, browser history, cached URLs, debugging tools, or inadvertently shared URLs. All sensitive information is securely transmitted through headers or the request body. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://Opportify.ai.tech).
 * https://Opportify.ai.tech
 * Do not edit the class manually.
 */


package ai.opportify.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import ai.opportify.client.JSON;

/**
 * Organization details for an IP address.
 */
@javax.annotation.Generated(value = "ai.opportify.codegen.languages.JavaClientCodegen", date = "2024-12-26T14:40:56.270361-08:00[America/Los_Angeles]", comments = "Generator version: 7.10.0")
public class Organization {
  public static final String SERIALIZED_NAME_ORG_ID = "orgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  @javax.annotation.Nullable
  private String orgId;

  public static final String SERIALIZED_NAME_ORG_NAME = "orgName";
  @SerializedName(SERIALIZED_NAME_ORG_NAME)
  @javax.annotation.Nullable
  private String orgName;

  public static final String SERIALIZED_NAME_ORG_TYPE = "orgType";
  @SerializedName(SERIALIZED_NAME_ORG_TYPE)
  @javax.annotation.Nullable
  private String orgType;

  public static final String SERIALIZED_NAME_DESCR = "descr";
  @SerializedName(SERIALIZED_NAME_DESCR)
  @javax.annotation.Nullable
  private List<String> descr = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private List<String> address = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  @javax.annotation.Nullable
  private String country;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  @javax.annotation.Nullable
  private List<String> phone = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAX = "fax";
  @SerializedName(SERIALIZED_NAME_FAX)
  @javax.annotation.Nullable
  private List<String> fax = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private List<String> email = new ArrayList<>();

  public Organization() {
  }

  public Organization orgId(@javax.annotation.Nullable String orgId) {
    this.orgId = orgId;
    return this;
  }

  /**
   * Organization ID.
   * @return orgId
   */
  @javax.annotation.Nullable
  public String getOrgId() {
    return orgId;
  }

  public void setOrgId(@javax.annotation.Nullable String orgId) {
    this.orgId = orgId;
  }


  public Organization orgName(@javax.annotation.Nullable String orgName) {
    this.orgName = orgName;
    return this;
  }

  /**
   * Organization name.
   * @return orgName
   */
  @javax.annotation.Nullable
  public String getOrgName() {
    return orgName;
  }

  public void setOrgName(@javax.annotation.Nullable String orgName) {
    this.orgName = orgName;
  }


  public Organization orgType(@javax.annotation.Nullable String orgType) {
    this.orgType = orgType;
    return this;
  }

  /**
   * Organization type.
   * @return orgType
   */
  @javax.annotation.Nullable
  public String getOrgType() {
    return orgType;
  }

  public void setOrgType(@javax.annotation.Nullable String orgType) {
    this.orgType = orgType;
  }


  public Organization descr(@javax.annotation.Nullable List<String> descr) {
    this.descr = descr;
    return this;
  }

  public Organization addDescrItem(String descrItem) {
    if (this.descr == null) {
      this.descr = new ArrayList<>();
    }
    this.descr.add(descrItem);
    return this;
  }

  /**
   * Organization description. It might return different values based on the data source. Some provide ownership, address, others provide a more abstract description. Our system tries to sanitize removing visual blocks special characters (+++, ---, ...).
   * @return descr
   */
  @javax.annotation.Nullable
  public List<String> getDescr() {
    return descr;
  }

  public void setDescr(@javax.annotation.Nullable List<String> descr) {
    this.descr = descr;
  }


  public Organization address(@javax.annotation.Nullable List<String> address) {
    this.address = address;
    return this;
  }

  public Organization addAddressItem(String addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<>();
    }
    this.address.add(addressItem);
    return this;
  }

  /**
   * Organization address details. No standard address format is guaranteed.
   * @return address
   */
  @javax.annotation.Nullable
  public List<String> getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nullable List<String> address) {
    this.address = address;
  }


  public Organization country(@javax.annotation.Nullable String country) {
    this.country = country;
    return this;
  }

  /**
   * Country code of the organization with 2 digits. (ISO 3166-1 alpha-2)
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(@javax.annotation.Nullable String country) {
    this.country = country;
  }


  public Organization phone(@javax.annotation.Nullable List<String> phone) {
    this.phone = phone;
    return this;
  }

  public Organization addPhoneItem(String phoneItem) {
    if (this.phone == null) {
      this.phone = new ArrayList<>();
    }
    this.phone.add(phoneItem);
    return this;
  }

  /**
   * Contact phone numbers.
   * @return phone
   */
  @javax.annotation.Nullable
  public List<String> getPhone() {
    return phone;
  }

  public void setPhone(@javax.annotation.Nullable List<String> phone) {
    this.phone = phone;
  }


  public Organization fax(@javax.annotation.Nullable List<String> fax) {
    this.fax = fax;
    return this;
  }

  public Organization addFaxItem(String faxItem) {
    if (this.fax == null) {
      this.fax = new ArrayList<>();
    }
    this.fax.add(faxItem);
    return this;
  }

  /**
   * Contact fax numbers.
   * @return fax
   */
  @javax.annotation.Nullable
  public List<String> getFax() {
    return fax;
  }

  public void setFax(@javax.annotation.Nullable List<String> fax) {
    this.fax = fax;
  }


  public Organization email(@javax.annotation.Nullable List<String> email) {
    this.email = email;
    return this;
  }

  public Organization addEmailItem(String emailItem) {
    if (this.email == null) {
      this.email = new ArrayList<>();
    }
    this.email.add(emailItem);
    return this;
  }

  /**
   * Previously sanitized and validated contact email addresses always in lower case.
   * @return email
   */
  @javax.annotation.Nullable
  public List<String> getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable List<String> email) {
    this.email = email;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Organization organization = (Organization) o;
    return Objects.equals(this.orgId, organization.orgId) &&
        Objects.equals(this.orgName, organization.orgName) &&
        Objects.equals(this.orgType, organization.orgType) &&
        Objects.equals(this.descr, organization.descr) &&
        Objects.equals(this.address, organization.address) &&
        Objects.equals(this.country, organization.country) &&
        Objects.equals(this.phone, organization.phone) &&
        Objects.equals(this.fax, organization.fax) &&
        Objects.equals(this.email, organization.email);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orgId, orgName, orgType, descr, address, country, phone, fax, email);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Organization {\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    orgName: ").append(toIndentedString(orgName)).append("\n");
    sb.append("    orgType: ").append(toIndentedString(orgType)).append("\n");
    sb.append("    descr: ").append(toIndentedString(descr)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    fax: ").append(toIndentedString(fax)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("orgId");
    openapiFields.add("orgName");
    openapiFields.add("orgType");
    openapiFields.add("descr");
    openapiFields.add("address");
    openapiFields.add("country");
    openapiFields.add("phone");
    openapiFields.add("fax");
    openapiFields.add("email");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Organization
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Organization.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Organization is not found in the empty JSON string", Organization.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Organization.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Organization` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("orgId") != null && !jsonObj.get("orgId").isJsonNull()) && !jsonObj.get("orgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgId").toString()));
      }
      if ((jsonObj.get("orgName") != null && !jsonObj.get("orgName").isJsonNull()) && !jsonObj.get("orgName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgName").toString()));
      }
      if ((jsonObj.get("orgType") != null && !jsonObj.get("orgType").isJsonNull()) && !jsonObj.get("orgType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("descr") != null && !jsonObj.get("descr").isJsonNull() && !jsonObj.get("descr").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `descr` to be an array in the JSON string but got `%s`", jsonObj.get("descr").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull() && !jsonObj.get("address").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be an array in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull() && !jsonObj.get("phone").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be an array in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fax") != null && !jsonObj.get("fax").isJsonNull() && !jsonObj.get("fax").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fax` to be an array in the JSON string but got `%s`", jsonObj.get("fax").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull() && !jsonObj.get("email").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be an array in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Organization.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Organization' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Organization> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Organization.class));

       return (TypeAdapter<T>) new TypeAdapter<Organization>() {
           @Override
           public void write(JsonWriter out, Organization value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Organization read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Organization given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Organization
   * @throws IOException if the JSON string is invalid with respect to Organization
   */
  public static Organization fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Organization.class);
  }

  /**
   * Convert an instance of Organization to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

